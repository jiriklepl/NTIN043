load terminal.maude .

fmod WORLD is
   protecting TERMINAL .
   protecting BANK .
   sorts World WorldBanks TransactionResult TransactionError .
   var BName : BankName .
   var B : Bank .
   var B2 : Bank .
   var C : Card .
   var D : Date .
   var CPIN : CardPIN .
   vars ANum, ANum2 : AccountNumber .
   var A : Amount .
   var CS  : CardStatus .
   var W : World .
   var TM : TerminalMemory .

   op world : Date WorldBanks -> World .

   op getWorldBanks : World -> WorldBanks .
   eq getWorldBanks(world(D, WBanks)) = WBanks .
   op getWorldDate : World -> Date .
   eq getWorldDate(world(D, WBanks)) = D .

   op worldBanks : Bank WorldBanks -> WorldBanks .
   op worldBanks : -> WorldBanks .
   var WBanks : WorldBanks .

   op getBankByName : BankName WorldBanks -> Bank .
   eq getBankByName(BName, worldBanks(B, WBanks)) =
      if BName == getBankName(B)
         then B
         else getBankByName(BName, WBanks)
      fi .
   eq getBankByName(BName, worldBanks) = nilBank .

   op removeBankByName : BankName WorldBanks -> WorldBanks .
   eq removeBankByName(BName, worldBanks(B, WBanks)) =
      if BName == getBankName(B)
         then WBanks
         else worldBanks(B, removeBankByName(BName, WBanks))
      fi .
   eq removeBankByName(BName, worldBanks) = worldBanks .

   op getBankByName : BankName World -> Bank .
   eq getBankByName(BName, W) = getBankByName(BName, getWorldBanks(W)) .

   op addBank : Bank WorldBanks -> WorldBanks .
   eq addBank(B, WBanks) = worldBanks(B, WBanks) .

   op addBank : Bank World -> World .
   eq addBank(B, world(D, WBanks)) = world(D, worldBanks(B, WBanks)) .

   op transactionResult : TransactionError World -> TransactionResult .
   op transactionResult : CardStatus World -> TransactionResult .
   op transactionResult : Terminal World -> TransactionResult .
   op transactionResult : World -> TransactionResult .
   ops insufficientBalance wrongPIN nonexistentBank wrongAccount : -> TransactionError .

   op transaction : Card CardPIN Amount BankName AccountNumber World -> TransactionResult .
   eq transaction(C, CPIN, A, BName, ANum, W) =
      transaction(
         getBankByName(getCardBankName(C), W),
         C,
         CPIN,
         A,
         getBankByName(BName, W),
         ANum,
         W) .

   op transaction : Bank Card CardPIN Amount Bank AccountNumber World -> TransactionResult .
   eq transaction(B, C, CPIN, A, B2, ANum, W) =
      if B == nilBank or B2 == nilBank
         then transactionResult(nonexistentBank, W)
         else if getCardStatus(C, getWorldDate(W), B) == cardOK
            then if cardToAccountNumber(C, CPIN, B) == nilAccountNumber
               then transactionResult(wrongPIN, W)
               else transaction(B, cardToAccountNumber(C, CPIN, B), A, B2, ANum, W)
            fi
            else transactionResult(getCardStatus(C, getWorldDate(W), B), W)
         fi
      fi .

   op transaction : Bank AccountNumber Amount Bank AccountNumber World -> TransactionResult .
   eq transaction(B, ANum, A, B2, ANum2, W) =
      if accountNumberToAccount(ANum, B) == nilAccount or accountNumberToAccount(ANum2, B2) == nilAccount
         then transactionResult(wrongAccount, W)
         else if getAccountBalance(accountNumberToAccount(ANum, B)) >= A
            then transactionResult(updateAccountBalance(
               ANum2,
               getAccountBalance(accountNumberToAccount(ANum2, B2)) + A,
               B2,
               updateAccountBalance(
                  ANum,
                  getAccountBalance(accountNumberToAccount(ANum, B)) - A,
                  B,
                  W)))
            else transactionResult(insufficientBalance, W)
         fi
      fi .

   op transaction : Terminal World -> TransactionResult .
   eq transaction(terminal(waitingForTransaction, TM, C), W) =
      transaction(
         terminal(waitingForTransaction, TM, C),
         transaction(
            getCard(TM),
            getCardPIN(TM),
            getPrice(TM),
            getBankName(TM),
            getAccountNumber(TM),
            W)) .

   var TErr : TransactionError .
   var CErr : CardStatus .
   var Term : Terminal .
   op transaction : Terminal TransactionResult -> TransactionResult .
   eq transaction(terminal(waitingForTransaction, TM, C), transactionResult(W)) =
      transactionResult(terminal(confirmation, TM, C), W) .
   eq transaction(terminal(waitingForTransaction, TM, C), transactionResult(TErr, W)) =
      transactionResult(terminal(errorState(TErr), TM, C), W) .
   eq transaction(terminal(waitingForTransaction, TM, C), transactionResult(CErr, W)) =
      transactionResult(terminal(errorState(CErr), TM, C), W) .

   op errorState : TransactionError -> TerminalState .
   op errorState : CardStatus -> TerminalState .

   op getWorld : TransactionResult -> World .
   eq getWorld(transactionResult(Term, W)) = W .

   op getTerminal : TransactionResult -> Terminal .
   eq getTerminal(transactionResult(Term, W)) =
      resetCardPIN(
         resetCard(
            resetPrice(changeState(idle, Term)))) .

   op updateAccountBalance : AccountNumber Amount Bank WorldBanks -> WorldBanks .
   eq updateAccountBalance(ANum, A, B, WBanks) =
      worldBanks(updateAccountBalance(ANum, A, B), removeBankByName(getBankName(B), WBanks)) .

   op updateAccountBalance : AccountNumber Amount Bank World -> World .
   eq updateAccountBalance(ANum, A, B, world(D, WBanks)) = world(D, updateAccountBalance(ANum, A, B, WBanks)) .
endfm
