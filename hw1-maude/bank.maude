fmod BANK is
   protecting NAT .
   protecting RAT .
   protecting STRING .
   sorts Bank Date .
   sorts Account AccountNumber BankAccounts Amount Balance .
   subsort Rat < Amount < Balance .
   subsort Nat < AccountNumber .
   sorts Card CardNumber BankCards BankName CardPIN CardIsBlocked CardExpDate CardStatus .
   subsort String < BankName .
   subsort Nat < CardNumber .
   subsort Nat < CardPIN .
   subsort Nat < Date < CardExpDate .
   subsort Bool < CardIsBlocked .

   var D : Date .

   --- Account ops
   op account : AccountNumber Balance -> Account .
   var ANum : AccountNumber .
   var ANum2 : AccountNumber .
   var B : Balance .
   var B2 : Balance .

   op nilAccount : -> Account .
   op nilAccountNumber : -> AccountNumber .

   op getAccountNumber : Account -> AccountNumber .
   eq getAccountNumber(account(ANum, B)) = ANum .

   op getAccountBalance : Account -> AccountNumber .
   eq getAccountBalance(account(ANum, B)) = B .

   op bankAccounts : Account BankAccounts -> BankAccounts .
   op bankAccounts : -> BankAccounts .
   var Acc : Account .
   var Acc2 : Account .
   var BAccs : BankAccounts .

   op accountNumberToAccount : AccountNumber BankAccounts -> Account .
   eq accountNumberToAccount(ANum, bankAccounts(Acc, BAccs)) =
      if ANum == getAccountNumber(Acc)
         then Acc
         else accountNumberToAccount(ANum, BAccs)
      fi .
   eq accountNumberToAccount(ANum, bankAccounts) = nilAccount .

   op accountNumberToAccount : AccountNumber Bank -> Account .
   eq accountNumberToAccount(ANum, bank(BName, BAccs, BCards)) = accountNumberToAccount(ANum, BAccs) .

   op removeAccount : AccountNumber BankAccounts -> BankAccounts .
   eq removeAccount(ANum, bankAccounts(Acc, BAccs)) =
      if ANum == getAccountNumber(Acc)
         then BAccs
         else bankAccounts(Acc, removeAccount(ANum, BAccs))
      fi .
   eq removeAccount(ANum, bankAccounts) = bankAccounts .

   op updateAccountBalance : AccountNumber Balance BankAccounts -> BankAccounts .
   eq updateAccountBalance(ANum, B, BAccs) =
      bankAccounts(account(ANum, B), removeAccount(ANum, BAccs)) .

   op updateAccountBalance : AccountNumber Balance Bank -> Bank .
   eq updateAccountBalance(ANum, B, bank(BName, BAccs, BCards)) =
      bank(BName, updateAccountBalance(ANum, B, BAccs), BCards) .

   --- Card ops
   op nilCard : -> Card .
   op card : CardNumber BankName -> Card .
   var C : Card .
   var CNum : CardNumber .
   var CNum2 : CardNumber .

   op getCardBankName : Card -> BankName .
   eq getCardBankName (card ( CNum, BName ) ) = BName .

   op getCardNumber : Card -> CardNumber .
   eq getCardNumber (card (CNum, BName ) ) = CNum .

   op bankCards : CardNumber CardPIN CardIsBlocked CardExpDate AccountNumber BankCards -> BankCards .
   op bankCards : -> BankCards .
   var BCards : BankCards .
   var CBlocked : CardIsBlocked .
   var CDate : CardExpDate .

   op nilPIN : -> CardPIN .
   var CPIN : CardPIN .
   var CPIN2 : CardPIN .

   ops cardExpired cardBlocked cardOK cardNotOurs : -> CardStatus .

   op cardToAccountNumber : CardNumber CardPIN BankCards -> AccountNumber .
   eq cardToAccountNumber(CNum, CPIN, bankCards(CNum2, CPIN2, CBlocked, CDate, ANum, BCards)) =
      if CNum == CNum2
         then if CPIN == CPIN2
            then ANum
            else nilAccountNumber
         fi
         else cardToAccountNumber(CNum, CPIN, BCards)
      fi .
   eq cardToAccountNumber(CNum, CPIN, bankCards) = nilAccountNumber .

   op cardToAccountNumber : CardNumber BankCards -> AccountNumber .
   eq cardToAccountNumber(CNum, bankCards(CNum2, CPIN, CBlocked, CDate, ANum, BCards)) =
      if CNum == CNum2
         then ANum
         else cardToAccountNumber(CNum, BCards)
      fi .
   eq cardToAccountNumber(CNum, CPIN, bankCards) = nilAccountNumber .

   op cardToAccountNumber : Card CardPIN BankCards -> AccountNumber .
   eq cardToAccountNumber(C, CPIN, BCards) = cardToAccountNumber(getCardNumber(C), CPIN, BCards) .

   op cardToAccountNumber : Card BankCards -> AccountNumber .
   eq cardToAccountNumber(C, BCards) = cardToAccountNumber(getCardNumber(C), BCards) .

   op cardToAccountNumber : Card CardPIN Bank -> AccountNumber .
   eq cardToAccountNumber(C, CPIN, bank(BName, BAccs, BCards)) = cardToAccountNumber(getCardNumber(C), CPIN, BCards) .

   op cardToAccountNumber : Card Bank -> AccountNumber .
   eq cardToAccountNumber(C, bank(BName, BAccs, BCards)) = cardToAccountNumber(getCardNumber(C), BCards) .

   op getCardStatus : CardNumber Date BankCards -> CardStatus .
   eq getCardStatus(CNum, D, bankCards(CNum2, CPIN, CBlocked, CDate, ANum, BCards)) =
      if CNum == CNum2
         then if CBlocked == true
            then cardBlocked
            else if CDate < D
               then cardExpired
               else cardOK
            fi
         fi
         else getCardStatus(CNum, D, BCards)
      fi .
   eq getCardStatus(CNum, D, bankCards) = cardNotOurs .

   op getCardStatus : Card Date BankCards -> CardStatus .
   eq getCardStatus(C, D, BCards) = getCardStatus(getCardNumber(C), D, BCards) .

   op getCardStatus : Card Date Bank -> CardStatus .
   eq getCardStatus(C, D, bank(BName, BAccs, BCards)) = getCardStatus(C, D, BCards) .

   --- Bank definition
   op bank : BankName BankAccounts BankCards -> Bank .
   op nilBank : -> Bank .
   var BName : BankName .

   op getBankName : Bank -> BankName .
   eq getBankName(bank(BName, BAccs, BCards)) = BName .
endfm
